{"version":3,"sources":["components/Screen.js","utils/constants.js","components/Button.js","components/Keyboard.js","components/Top.js","logic/calculation.js","logic/operation.js","components/App.js","serviceWorker.js","index.js"],"names":["Screen","value","mem","className","id","type","name","slice","maxLength","disabled","buttons","dataType","children","viewBox","fill","xmlns","d","stroke","strokeWidth","Button","onClick","data-type","Keyboard","handleChange","map","el","key","bind","Top","props","calculation","state","setState","result","calculate","firstValue","operation","secondValue","first","Big","second","plus","toString","minus","times","div","memValue","operator","tempValue","screenValue","valueToAdd","indexOf","lastClicked","negate","printNumber","addOperator","sqrt","length","advanced","memoryValue","memory","memoryHandler","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8caafe76.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Screen.css';\r\n\r\nexport function Screen({ value, mem }) {\r\n  return (\r\n    <div className=\"calculator__screen-container\">\r\n      <p className={`calculator__screen-mem ${(mem !=='0') && 'calculator__screen-mem_visible'}`}>M</p>\r\n      <input\r\n        id=\"display\"\r\n        type=\"text\"\r\n        className=\"calculator__screen\"\r\n        name=\"screen\"\r\n        value={value.slice(0, 10)}\r\n        maxLength=\"10\"\r\n        disabled\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nconst square = (\r\n  <svg\r\n    className=\"square-symbol\"\r\n    viewBox=\"0 0 33 23\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path d=\"M2 10l5 11h2.5l6-19H33\" stroke=\"#fff\" strokeWidth=\"3\" />\r\n  </svg>\r\n);\r\n\r\nconst backspace = (\r\n  <svg\r\n    className=\"backspace-symbol\"\r\n    viewBox=\"0 0 27 22\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path d=\"M12 2l-9 9 9 9M3 11h24\" stroke=\"#fff\" strokeWidth=\"3\" />\r\n  </svg>\r\n);\r\n\r\nexport const buttons = [\r\n  { id: 'clear', dataType: 'clear', value: 'C', children: 'C' },\r\n  { id: 'mrc', dataType: 'memory', value: 'MRC', children: 'MRC' },\r\n  { id: 'mminus', dataType: 'memory', value: 'MMINUS', children: 'M-' },\r\n  { id: 'mplus', dataType: 'memory', value: 'MPLUS', children: 'M+' },\r\n  { id: 'negate', dataType: 'advanced', value: 'NEGATE', children: '+/-' },\r\n  { id: 'percent', dataType: 'advanced', value: 'PERCENT', children: '%' },\r\n  {\r\n    id: 'square',\r\n    dataType: 'advanced',\r\n    value: 'SQUARE',\r\n    children: square,\r\n  },\r\n  {\r\n    id: 'backspace',\r\n    dataType: 'advanced',\r\n    value: 'BACKSPACE',\r\n    children: backspace,\r\n  },\r\n  { id: 'seven', dataType: 'number', value: 7, children: 7 },\r\n  { id: 'eight', dataType: 'number', value: 8, children: 8 },\r\n  { id: 'nine', dataType: 'number', value: 9, children: 9 },\r\n  { id: 'divide', dataType: 'operation', value: 'DIVIDE', children: 'รท' },\r\n  { id: 'four', dataType: 'number', value: 4, children: 4 },\r\n  { id: 'five', dataType: 'number', value: 5, children: 5 },\r\n  { id: 'six', dataType: 'number', value: 6, children: 6 },\r\n  { id: 'multiply', dataType: 'operation', value: 'MULTIPLY', children: 'ร' },\r\n  { id: 'one', dataType: 'number', value: 1, children: 1 },\r\n  { id: 'two', dataType: 'number', value: 2, children: 2 },\r\n  { id: 'three', dataType: 'number', value: 3, children: 3 },\r\n  { id: 'subtract', dataType: 'operation', value: 'SUBTRACT', children: '-' },\r\n  { id: 'zero', dataType: 'number', value: 0, children: 0 },\r\n  { id: 'decimal', dataType: 'number', value: '.', children: '.' },\r\n  { id: 'equals', dataType: 'equals', value: 'EQUALS', children: '=' },\r\n  { id: 'add', dataType: 'operation', value: 'ADD', children: '+' },\r\n];\r\n","import React from 'react';\r\nimport './Button.css';\r\n\r\nexport function Button({ id, dataType, value, children, onClick }) {\r\n  return (\r\n    <button\r\n      id={id}\r\n      type=\"button\"\r\n      data-type={dataType}\r\n      className={`button button_type_${dataType}`}\r\n      value={value}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './Keyboard.css';\r\nimport { buttons } from '../utils/constants'\r\nimport { Button } from './Button';\r\n\r\nexport function Keyboard({ handleChange }) {\r\n  const onClick = (dataType, value) => {\r\n    handleChange({dataType, value});\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculator__keyboard\">\r\n      {buttons.map((el) => (\r\n        <Button\r\n          key={el.id}\r\n          id={el.id}\r\n          dataType={el.dataType}\r\n          value={el.value}\r\n          children={el.children}\r\n          onClick={onClick.bind(null, el.dataType, el.value)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './Top.css';\r\n\r\nexport function Top(props) {\r\n  return (\r\n    <div className=\"calculator__top\">\r\n      <div className=\"calculator__heading\">\r\n        <h1 className=\"calculator__title\">CATLOGIC</h1>\r\n        <h2 className=\"calculator__subtitle\">CL-002</h2>\r\n      </div>\r\n      <div className=\"calculator__sun-battery-container\">\r\n        <div className=\"calculator__sun-battery\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { operation, advanced, memory } from './operation';\r\n\r\nexport function calculation({ dataType, value }, state, setState) {\r\n  /** Temporary variable for calculations */\r\n  let result = null;\r\n\r\n  const printNumber = () => {\r\n    if (state.screenValue === 'Error') return;\r\n    let valueToAdd = value.toString();\r\n    /** Forbid multiple leading zeroes */\r\n    if (state.screenValue === '0' && valueToAdd === '0') return;\r\n    /** Add decimal, prevent multiple decimals */\r\n    if (value === '.') {\r\n      if (\r\n        state.screenValue.indexOf('.') !== -1 &&\r\n        state.lastClicked.dataType !== 'operation'\r\n      )\r\n        return;\r\n      /** Add 0 before . if starting or continuing calculation */\r\n      if (!state.screenValue || state.lastClicked.dataType === 'operation')\r\n        valueToAdd = '0.';\r\n    }\r\n    /** Save first value and start next value if operation was pressed */\r\n    if (state.lastClicked.dataType === 'operation') {\r\n      /** Negate value if minus was pressed after first operation */\r\n      if (state.negate) {\r\n        valueToAdd = -valueToAdd;\r\n      }\r\n      setState({\r\n        ...state,\r\n        screenValue: valueToAdd.toString(),\r\n        memValue: state.screenValue,\r\n        lastClicked: { dataType, value },\r\n        negate: false,\r\n      });\r\n      return;\r\n    }\r\n    /** New calculation if equals or memory was pressed */\r\n    if (\r\n      state.lastClicked.dataType === 'equals' ||\r\n      state.lastClicked.dataType === 'memory'\r\n    ) {\r\n      setState({\r\n        ...state,\r\n        screenValue: valueToAdd.toString(),\r\n        operator: '',\r\n        memValue: '',\r\n        tempValue: '',\r\n        lastClicked: { dataType, value },\r\n        negate: false,\r\n      });\r\n      return;\r\n    }\r\n    /** Update state with number */\r\n    setState({\r\n      ...state,\r\n      screenValue: (state.screenValue += valueToAdd),\r\n      lastClicked: { dataType, value },\r\n    });\r\n  };\r\n\r\n  const addOperator = () => {\r\n    if (state.screenValue === 'Error') return;\r\n    /** Chain operations */\r\n    if (state.lastClicked.dataType === 'number' && state.memValue) {\r\n      const result = calculate();\r\n      setState({\r\n        ...state,\r\n        screenValue: result,\r\n        operator: value,\r\n        memValue: result,\r\n        tempValue: '',\r\n        lastClicked: { dataType, value },\r\n      });\r\n      return;\r\n    }\r\n    /** Set temporary state for negation */\r\n    if (state.lastClicked.dataType === 'operation' && value === 'SUBTRACT') {\r\n      setState({ ...state, negate: true });\r\n      return;\r\n    }\r\n    setState({\r\n      ...state,\r\n      screenValue: state.screenValue || '0',\r\n      operator: value,\r\n      tempValue: '',\r\n      lastClicked: { dataType, value },\r\n      negate: false,\r\n    });\r\n  };\r\n\r\n  const advancedOperation = () => {\r\n    if (state.screenValue === 'Error') return;\r\n    /** Disable backspace if calculation in progress */\r\n    if (\r\n      (state.lastClicked.dataType === 'operation' || !state.screenValue) &&\r\n      value === 'BACKSPACE'\r\n    )\r\n      return;\r\n    result = advanced(state.screenValue, value);\r\n    setState({\r\n      ...state,\r\n      screenValue: result,\r\n      lastClicked: { dataType, value },\r\n    });\r\n  };\r\n\r\n  const memoryHandler = () => {\r\n    if (state.screenValue === 'Error') return;\r\n    if (value === 'MPLUS' || value === 'MMINUS') {\r\n      result = memory(state.memory, value, state.screenValue);\r\n      setState({ ...state, memory: result, lastClicked: { dataType, value } });\r\n      return;\r\n    } else if (value === 'MRC') {\r\n      if (state.lastClicked.value === 'MRC') {\r\n        setState({ ...state, memory: '0' });\r\n        return;\r\n      }\r\n      setState({\r\n        ...state,\r\n        screenValue: state.memory,\r\n        memValue: state.screenValue,\r\n        lastClicked: { dataType, value },\r\n      });\r\n    }\r\n  };\r\n\r\n  const calculate = () => {\r\n    /** Set temporary value for multiple equals pressing */\r\n    return operation(\r\n      state.memValue,\r\n      state.operator,\r\n      state.tempValue || state.screenValue\r\n    );\r\n  };\r\n\r\n  const calculateHandler = () => {\r\n    if (state.screenValue === 'Error') return;\r\n    result = calculate();\r\n    setState({\r\n      ...state,\r\n      screenValue: result,\r\n      memValue: result,\r\n      tempValue: state.tempValue || state.screenValue,\r\n      lastClicked: { dataType, value },\r\n    });\r\n  };\r\n\r\n  const clear = () => {\r\n    setState({\r\n      ...state,\r\n      screenValue: '',\r\n      operator: '',\r\n      memValue: '',\r\n      tempValue: '',\r\n      lastClicked: {},\r\n      negate: false,\r\n    });\r\n  };\r\n\r\n  if (dataType === 'number') {\r\n    printNumber();\r\n  } else if (dataType === 'operation') {\r\n    addOperator();\r\n  } else if (dataType === 'advanced') {\r\n    advancedOperation();\r\n  } else if (dataType === 'memory') {\r\n    memoryHandler();\r\n  } else if (dataType === 'equals' && state.memValue) {\r\n    calculateHandler();\r\n  } else if (dataType === 'clear') {\r\n    clear();\r\n  }\r\n}\r\n","import Big from 'big.js';\r\n\r\nexport function operation(firstValue, operation, secondValue) {\r\n  /** TODO: Handle big numbers */\r\n  const first = Big(firstValue);\r\n  const second = Big(secondValue);\r\n\r\n  if (operation === 'ADD') {\r\n    return first.plus(second).toString();\r\n  }\r\n  if (operation === 'SUBTRACT') {\r\n    return first.minus(second).toString();\r\n  }\r\n  if (operation === 'MULTIPLY') {\r\n    return first.times(second).toString();\r\n  }\r\n  if (operation === 'DIVIDE') {\r\n    /** Forbid dividing by zero */\r\n    if (secondValue === '0') {\r\n      return 'Error';\r\n    }\r\n    return first.div(second).toString();\r\n  }\r\n}\r\n\r\nexport function advanced(screenValue, operation) {\r\n  const value = Big(screenValue);\r\n\r\n  if (operation === 'NEGATE') {\r\n    return (-value).toString();\r\n  }\r\n  if (operation === 'PERCENT') {\r\n    return (value * 0.01).toString();\r\n  }\r\n  /** Forbid square root for negative numbers */\r\n  if (operation === 'SQUARE') {\r\n    if (value < 0) {\r\n      return 'Error';\r\n    }\r\n    return value.sqrt().toString();\r\n  }\r\n  if (operation === 'BACKSPACE') {\r\n    if (screenValue.length > 1) {\r\n      return value.toString().slice(0, -1);\r\n    } else return '';\r\n  }\r\n}\r\n\r\nexport function memory(memoryValue, operation, screenValue) {\r\n  const mem = Big(memoryValue);\r\n  const value = Big(screenValue);\r\n\r\n  if (operation === 'MMINUS') {\r\n    return mem.minus(value).toString();\r\n  }\r\n  if (operation === 'MPLUS') {\r\n    return mem.plus(value).toString();\r\n  }\r\n}\r\n","import React, { useState } from 'react';\nimport { Screen } from './Screen';\nimport { Keyboard } from './Keyboard';\nimport { Top } from './Top';\nimport { calculation } from '../logic/calculation';\nimport 'normalize.css';\nimport './App.css';\n\nfunction App() {\n  const [state, setState] = useState({\n    screenValue: '',\n    operator: '',\n    memValue: '',\n    tempValue: '',\n    lastClicked: {},\n    negate: false,\n    memory: '0'\n  });\n\n  const handleChange = (value) => {\n    calculation(value, state, setState);\n  };\n\n  return (\n    <div className=\"calculator\">\n      <Top />\n      <Screen value={state.screenValue || '0'} mem={state.memory} />\n      <Keyboard handleChange={handleChange} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}